@inherits Umbraco.Web.Mvc.UmbracoViewPage<List<NavigationListItem>>
@using PJDu8.Web.Models

<header id="header">
    <a class="logo" href="/"><i class="icon fa-fw @Umbraco.AssignedContentItem.Value("homeIconPicker", fallback: Fallback.ToAncestors)"></i> @Umbraco.AssignedContentItem.Value("homeIconTextSiteTite", fallback: Fallback.ToAncestors)</a>
    <nav>
        <a style="font-size: 20px;" href="#menu">Menu</a>
    </nav>
</header>
<nav id="menu" role="navigation">
    <ul class="links">
        @RenderChildItems(Model)
    </ul>
    <hr />
    <div style="padding-top:100px;text-align:center;">
        <h4>@Umbraco.AssignedContentItem.Value("contactText", fallback: Fallback.ToAncestors)</h4>
        <i id="contact-button" class="icon hvr-bounce-in @Umbraco.AssignedContentItem.Value("contactIconPicker", fallback: Fallback.ToAncestors)" style="font-size:40px;color:white;"></i>
    </div>
</nav>


@helper RenderChildItems(List<NavigationListItem> listItems)
{
    if (listItems != null)
    {
        foreach (var item in listItems)
        {
            <li>
                @if (!String.IsNullOrEmpty(item.Text))
                {
                    @item.Text
                }
                else if (item.Link != null)
                {
                    <a href="@item.Link.Url" class="@(Umbraco.AssignedContentItem.Url == item.Link.Url ? "active" : null) @(item.HasChildren ? "hasChildren" : null)" target="@item.Link.Target">@item.Link.Text</a>
                }

                @if (item.HasChildren)
                {
                    <ol style="list-style:disc !important" id="childItems">
                        @RenderChildItems(item.Items)
                    </ol>
                }
            </li>
        }
    }
}